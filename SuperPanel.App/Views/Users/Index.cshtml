@model X.PagedList.IPagedList<Infrastructure.Models.User>
@using X.PagedList.Mvc.Core

@{
    ViewData["Title"] = "User's list";
}

<div class="container">
    <div class="modal" id="spinnerModal" tabindex="-1">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-body text-center">
            <div class="spinner-border text-primary" role="status"></div>
          </div>
        </div>
      </div>
    </div>
</div>

<button onclick="deleteSelectedRows()">Delete Selected Rows</button>

<table class="table">

    <thead>
    <tr>
        <th></th>
        <th>#</th>
        <th>Name</th>
        <th>Email</th>
        <th>Created at</th>
        <th></th>
    </tr>
    </thead>
    @foreach (var u in Model)
    {
        <tr>
            <td><input type="checkbox" name="selectedRows" value="@u.Id"></td>
            <td>@u.Id</td>
            <td>@u.FirstName @u.LastName</td>
            <td>@u.Email</td>
            <td>@u.CreatedAt</td>
            <td><button onclick="deleteItem(@u.Id)">Delete</button></td>
        </tr>
    }
</table>
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index", 
    new { page }), new PagedListRenderOptions {
        LiElementClasses = new string[] { "page-item" },
        PageClasses = new string[] { "page-link" }
    })

@section Scripts {
    <script>        
        const spinnerModal = new bootstrap.Modal(document.getElementById('spinnerModal'));
        function deleteSelectedRows() {
            let selectedIds = [];
            const checkboxes = document.getElementsByName('selectedRows');
            for (let i = 0; i < checkboxes.length; i++) {
                if (checkboxes[i].checked) {
                    selectedIds.push(checkboxes[i].value);
                }
            }
        
            if (selectedIds.length === 0) {
                alert('Please select rows to delete.');
                return;
            }
        
            var confirmDeletion = confirm("Are you sure you want to delete the selected rows?");
            if (!confirmDeletion) return;
        
            fetch('/yourDeleteEndpoint', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ ids: selectedIds })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Failed to delete rows.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred. Please try again.');
            });
        }
        async function deleteItem(itemId) {
            if (confirm("Are you sure you want to delete this item?")) {
                try {
                    spinnerModal.show();
                    await fetch(`@Url.Action("Delete", "Users", null, "https")/${itemId}`, {
                        method: 'DELETE'
                    }).then(response => {
                        if (!response.ok) {
                             spinnerModal.hide();
                             alert('Failed to delete the item.');
                        }
                        const rowToDelete = document.getElementById(`row-${itemId}`);
                        if (rowToDelete) {
                            rowToDelete.remove();
                        }
                        spinnerModal.hide();
                    })
                    .catch(error => { 
                        spinnerModal.hide();
                        alert('Failed to delete the item.');
                    });
                }
                catch (e) {
                  spinnerModal.hide();
                  alert('Failed to delete the item.');
                }
            }
        }
    </script>
}
